#!/usr/bin/env python3
import argparse
import os
import tarfile
import time

REPO_SOURCES = ('github', 'gitlab', 'bitbucket')
FETCH_METHODS = ('curl_cli', 'requests')

def main():
    args = parse_args()
    package = fetch_git(
        source_name=args.source,
        group_name=args.group,
        repo_name=args.repo,
        branch_name=args.branch,
        github_token=args.github_token,
        gitlab_token=args.gitlab_token,
        gitlab_host=args.gitlab_host,
        bitbucket_user=args.bitbucket_user,
        bitbucket_password=args.bitbucket_password
    )
    print('Retrieved package')
    print('Unpacking contents into {}'.format(args.dest))
    unpack_package(package, args.dest)
    print('Fetch repo done')


def parse_args():
    parser = argparse.ArgumentParser(description='Fetch a repository')
    # primary data
    parser.add_argument('--source', help='Git server')
    parser.add_argument('--group', help='Organization name')
    parser.add_argument('--repo', help='Repository name')
    parser.add_argument('--branch', help='Branch name')
    # optional data
    parser.add_argument('--dest', help='Destination', default='./')
    parser.add_argument('--fetch_method', help='Fetch method')
    # server-specific data
    # github
    parser.add_argument('--github_token', help='Github token')
    # gitlab
    parser.add_argument('--gitlab_host', help='Gitlab host')
    parser.add_argument('--gitlab_token', help='Gitlab token')
    # bitbucket
    parser.add_argument('--bitbucket_user', help='Bitbucket user')
    parser.add_argument('--bitbucket_password', help='Bitbucket password')
    args = parser.parse_args()
    return args

def sys_exec(command):
    """
    Run a command and capture it's output
    """
    print('Running: {}'.format(command))
    return os.popen(command).read().rstrip()

def build_temp_package_filepath(key=None):
    tmp_path = "/tmp"
    tmp_id = round(time.time())
    return "{}/fetch-repo-{}.tar.gz".format(tmp_path, tmp_id)



def detect_fetch_method(preferred: list=None):
    methods = preferred or FETCH_METHODS
    for method in methods:
        if method == 'curl_cli':
            if sys_exec('which curl') or None:
                return method
        elif method == 'requests':  
            import importlib
            if importlib.util.find_spec("requests") or None:
                return method


def _fetch_package_requests(source, headers, auth):
    """
    Fetch using python's requests module
    """
    import requests
    dest = build_temp_package_filepath()
    response = requests.get(source, stream=True, headers=headers, auth=auth)
    response.raise_for_status()
    with open(dest, 'wb') as handle:
        for block in response.iter_content(1024):
            handle.write(block)
    package = tarfile.open(dest)
    return package


def _fetch_package_curl_cli(source, headers, auth):
    dest = build_temp_package_filepath()
    headers = ["-H '{}: {}'".format(k, v) for k, v in headers.items()]
    if auth:
        headers.append('-u {}:{}'.format(*auth))
    cmd = "curl -L '{source}' -o {dest} {headers}".format(
        source=source, headers=''.join(headers) if headers else '', dest=dest
    )
    res = sys_exec(cmd)
    package = tarfile.open(dest, mode="r:gz")
    return package


def fetch_package(source, method=None, headers=None, auth=None):
    """
    Download a package and return a package object
    """
    #if method not in ('requests', 'curl_cli'):
    #    raise Exception('Fetch package method "{}" not found'.format(method))
    if not method:
        method = detect_fetch_method()
    print('Using fetch method "{}"'.format(method))
    print('Source {}'.format(source))
    fetch_method = '_fetch_package_{}'.format(method)
    package = eval(fetch_method)(source, headers, auth)
    return package


def unpack_package(package, dest):
    """
    Unpack a package, that is a tar file
    """
    members = []
    for member in package.getmembers():
        # this is the equivalent of `--strip-components 1` when using tar CLI
        split_res = member.path.split('/', 1)
        if len(split_res) == 1:
            continue
        stripped_path = split_res[1]
        if not stripped_path:
            continue
        # set the name to the stripped path to take effect when extracting
        member.name = stripped_path
        members.append(member)
    package.extractall(dest, members=members)


def fetch_github(
    group_name, repo_name, branch_name, github_token=None, **kwargs
):
    headers = {}
    if github_token:
        headers['Authorization'] = 'token {}'.format(github_token)
    url = "https://api.github.com/repos/{group_name}/{repo_name}/tarball/{branch_name}".format(
        group_name=group_name, repo_name=repo_name, branch_name=branch_name
    )
    return fetch_package(url, headers=headers)


def fetch_gitlab(
    group_name, repo_name, branch_name, gitlab_host, gitlab_token=None, **kwargs
):
    headers = {}
    if gitlab_token:
        headers['Private-Token'] = gitlab_token
    #url = "{gitlab_host}/{group_name}/{repo_name}/repository/archive.tar.gz?ref={branch_name}".format(
    url = "{gitlab_host}/api/v4/projects/{group_name}%2F{repo_name}/repository/archive.tar.gz?ref={branch_name}".format(
        group_name=group_name,
        repo_name=repo_name,
        branch_name=branch_name,
        gitlab_host=gitlab_host,
    )
    return fetch_package(url, headers=headers)


def fetch_bitbucket(
    group_name,
    repo_name,
    branch_name,
    bitbucket_user=None,
    bitbucket_password=None,
    **kwargs
):
    auth = (bitbucket_user, bitbucket_password)
    url = "https://bitbucket.org/{group_name}/{repo_name}/get/{branch_name}.tar.gz".format(
        group_name=group_name, repo_name=repo_name, branch_name=branch_name
    )
    return fetch_package(url, auth=auth)


def fetch_git(source_name, *args, **kwargs):
    if source_name not in REPO_SOURCES:
        raise Exception('unknown repo source "{}"'.format(source_name))
    fetch_server = 'fetch_{}'.format(source_name)
    package = eval(fetch_server)(*args, **kwargs)
    return package
    


if __name__ == '__main__':
    main()
